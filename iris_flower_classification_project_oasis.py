# -*- coding: utf-8 -*-
"""iris flower classification project OASIS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vvGKwOROb64OgqHD90gnvDm1hBDSGAip
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
# %matplotlib inline

"""Reading the dataset :"""

iris = pd.read_csv("/content/Iris (1).csv")

iris.head(10)

iris.shape

iris.columns

# CHECKING FOR NULL VALUES

iris.isnull().sum()

# DROPPING THE UNNECESSARY

iris = iris.drop('Id',axis=1)

iris.head(10)

iris['Species'].value_counts()

n = len(iris[iris['Species'] == 'Iris-versicolor'])
print("No of Versicolor in Dataset:",n)

n1 = len(iris[iris['Species']=='Iris-setosa'])
print("No of setosa in dataset",n)

n2 = len(iris[iris['Species']=='Iris-virginica'])
print("No of virginica in dataset",n)

#Checking for outliars
import matplotlib.pyplot as plt
plt.figure(1)
plt.boxplot([iris['SepalLengthCm']])
plt.figure(2)
plt.boxplot([iris['SepalWidthCm']])
plt.show()

iris.hist()
plt.figure(figsize=(10,7))
plt.show()

sns.pairplot(iris,hue='Species')

from sklearn.linear_model import LogisticRegression 
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn import svm
from sklearn import metrics

train, test = train_test_split(iris, test_size = 0.3)
print(train.shape)
print(test.shape)

train_X = train[['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm',
                 'PetalWidthCm']]
train_y = train.Species

test_X = test[['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm',
                 'PetalWidthCm']]
test_y = test.Species

train_X

train_y

"""Using LogisticRegression :"""

model1 = LogisticRegression()
model1.fit(train_X, train_y)
prediction = model1.predict(test_X)
prediction

print('Accuracy:',metrics.accuracy_score(prediction,test_y))

#Confusion matrix
from sklearn.metrics import confusion_matrix,classification_report
confusion_mat = confusion_matrix(test_y,prediction)
print("Confusion matrix: \n",confusion_mat)

"""**Using Support Vector Machine :**"""

from sklearn.svm import SVC
model1 = SVC()
model1.fit(train_X,train_y)

pred_y = model1.predict(test_X)

from sklearn.metrics import accuracy_score

print("Acc=",accuracy_score(test_y,pred_y))

"""Using KNN Neighbors :"""

from sklearn.neighbors import KNeighborsClassifier
model2 = KNeighborsClassifier(n_neighbors=5)
model2.fit(train_X,train_y)
y_pred2 = model2.predict(test_X)

from sklearn.metrics import accuracy_score
print("Accuracy Score:",accuracy_score(test_y,y_pred2))

"""Using Naive Bayes :"""

from sklearn.naive_bayes import GaussianNB
model3 = GaussianNB()
model3.fit(train_X,train_y)
y_pred3 = model3.predict(test_X)

from sklearn.metrics import accuracy_score
print("Accuracy Score:",accuracy_score(test_y,y_pred3))

"""Result of all the models :"""

results = pd.DataFrame({
    'Model': ['Logistic Regression','Support Vector Machines', 'KNN','Naive Bayes'],
    'Score': [0.9777,0.9777,0.9555,0.9555]})

result_df = results.sort_values(by='Score', ascending=False)
result_df = result_df.set_index('Score')
result_df.head(9)

